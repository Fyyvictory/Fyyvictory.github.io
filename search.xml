<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[代码整洁之道笔记]]></title>
    <url>%2F2019%2F06%2F19%2F%E4%BB%A3%E7%A0%81%E6%95%B4%E6%B4%81%E4%B9%8B%E9%81%93%E7%AC%94%E8%AE%B0%2F</url>
    <content type="text"><![CDATA[代码命名需要规范直接，可以一眼看出来命名的含义 即便容器就是一个list，最好也别在名称中写出容器类型名 代码命名要做有意义的区分，不要使用info，data等这样没有实际意义的文字去做区分 一个函数只做一件事；判断一个函数是否只做了一件事，就看该函数是否可以合理的切分成多个区段。 自顶向下的规则：让代码拥有自顶向下的阅读顺序，让每一个函数后面都跟着下一抽象层级的函数，这样，在查看函数列表的时候，就能循着抽象层级向下阅读了。 对于switch语句，一般用于创建多态对象，而且隐藏在某个继承关系中，在系统其它部分看不见。即一般用于工厂模式中。 别害怕长名字，长而具有描述性的名称，要比短而令人费解的名称好，长而具有描述性的名称，要比描述性的长注释好。 尽量减少函数参数，一般不宜超过三个。 依赖磁铁。其它许多类都需要导入或使用该类，例如：常量类。 避免代码重复，面向对象编程，面向组件编程其中都包含消除重复代码的思想。 函数是语言的动词，类是名词 👨‍💻‍应该负责将注释保持在可维护，有关联，精确的高度，但是更加需要注重的能力是代码尽量的明确简洁，尽量的不要依赖于注释 TODO注释标记时，完成之后需要及时清理 编写公共API的时候，尽量编写完整的javadoc，当然，也需要注意上面几条提示，保证javadoc的可维护性和精确性。 注释需要清晰完整，不要让看到的人需要联系上下文才能理解注释的 能用函数或变量时就别用注释，可以把一个相当长的表达式拆分成短小直观的多个表达式，好处在于其一，便于阅读和维护，其二，便于避免逻辑漏洞。 清理注释掉的代码，因为99%的情况下注释掉的代码不会再用到。 一个项目中应该保持一套一致的代码格式规则 函数或属性之间的垂直距离。关系密切的概念应该相互靠近。变量声明应该尽可能靠近其使用位置；实体变量应该在类的顶部声明。若某个函数调用了另一个，就应该把它们放在一起，并且调用者放在被调用者之上，这样会形成自上而下的调用顺序。概念相关的代码也应该放在一起(相关性包括相互调用，同一组函数或者执行相似操作的代码) 代码行尽可能的简短，不需要拖动滚动条就可以查看完整这一行的代码；这也意味着函数长度不要过长，不要一句代码嵌套太多函数，最好是分成多行简短的代码，这样增加代码可读性。 隐藏实现并非只是在变量之间放上一个函数层那么简单，隐藏实现关乎抽象，类并不简单的用get，set方法将变量完全暴露出来，而是暴露抽象接口，以便用户无需了解数据的实现就能操作数据本体。(即用户可以直接使用现有的实现而无需关心实现的细节) 面向对象的编程在于不改变现有的函数，而是增加新的类；面向过程的编程是不需要增加新的类，而是修改函数。两者各有使用场景； 德墨忒耳律认为，模块不应了解它所操作对象的内部情形，这意味着对象不应通过存取器暴露其内部结构。 连串调用一般被称为火车失事，通常被认为是肮脏的风格，应该避免。 混杂调用也是需要避免的函数调用方式，同一个对象调用中，应当尽量隐藏内部实现细节。 DTO(data transfer objects)；最为精练得数据结构，是一个只有公共变量，没有函数的类。这种数据结构有时被称为数据传送对象。一般在与数据库通信、或解析套接字传递的消息之类的场景中。 使用异常，而非返回码。因为异常是需要显式的处理或抛出；而如果使用返回码，调用者很容易忘记处理。 打包第三方库，即把对第三方库的调用封装，那么后续有什么修改只需要改动封装类即可，避免整个项目大量的修改。 尽量避免返回null值，返回null值，调用者就需要有各种空判断。 别传递null值， 覆盖生产代码的自动化单元测试程序组能尽可能的保持设计和架构的整洁。 整洁的测试需要遵循以下5条规则FIRST；F：快速执行；I：测试应当相互独立，某个测试不应为下一个测试的设定条件；R：可重复，测试应该在任何环境下重复通过；S：自足验证，测试应该有布尔值输出，无论通过还是失败，不应该通过查看日志来确认测试是否通过；T：测试应该及时编写。 类的名称应该描述其权责，并且类应当尽量的短小。类只应有一个权责，即单一权责原则(SRP)。当然也因此可以限制一个类的长度。 内聚，内聚性高，意味着类中的方法和变量互相依赖、互相结合成一个逻辑整体。 依赖倒置原则（DIP）。dip认为类应当依赖于抽象而不是依赖于具体细节。 遵循以下规则，设计就能变得简单： 运行所有测试 不可重复 表达了程序员的意图 尽可能的减少类和方法的数量 以上规则按其重要程度排列 在重构过程中，可以应用有关优秀软件设计的一切知识，提升内聚性，降低耦合度，切分关注面，模块化系统性关注面，缩小函数和类的尺寸，选用更好的名称，这也是应用简单设计后三条规则的地方：消除重复，保证表达力，尽可能减少类和方法的数量。 通常倾向于选用非静态的方法，如果确实需要静态函数，确保该函数永远不需要有多态的行为。 让程序可读的最有力方法之一就是将计算过程打算成有意义的单词命名的变量，当然，这个还是需要一个度，也不能完全拆分成很多变量，这样会造成代码冗余。 函数名称应该表达其行为。也就是说，调用一个函数，看函数名称就可以让人知道该函数做了什么事情。 逻辑依赖改为函数依赖。一个函数的使用，不应该对调用者有假定条件(即逻辑依赖)。 用命名常量代替魔术数。 代码中应当消除含糊不定和不准确的写法。 封装条件；避免否定式的条件，因为否定式的条件总是会比肯定式的难以理解一些。 函数只应该做一件事，即函数的原子性。 代码结构应当始终一致，不能随意设定和编写。 避免传递浏览or传递调用，即a.getB().getC().dosomething();这种方法，按道理来说，a与b协作，b与c协作，那么a跟c不应当有直接调用。 不要继承常量。]]></content>
      <tags>
        <tag>技术笔记</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA[test]]></title>
    <url>%2F2019%2F05%2F08%2Ftest%2F</url>
    <content type="text"></content>
  </entry>
  <entry>
    <title><![CDATA[Hello World]]></title>
    <url>%2F2019%2F05%2F08%2Fhello-world%2F</url>
    <content type="text"><![CDATA[Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new "My New Post" More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment]]></content>
  </entry>
</search>
